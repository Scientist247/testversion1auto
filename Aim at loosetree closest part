local player = game.Players.LocalPlayer
local camera = game.Workspace.CurrentCamera

-- Function to find the closest OctagonPart
local function findClosestOctagonPart()
    local closestPart = nil
    local closestDistance = math.huge  -- Start with an infinitely large distance

    -- Iterate through each LooseTree in the Workspace
    for _, looseTree in ipairs(game.Workspace.World.LooseItems:GetChildren()) do
        if looseTree:IsA("Model") then
            -- If the model has multiple OctagonParts, loop through them
            for _, child in ipairs(looseTree:GetChildren()) do
                if child:IsA("BasePart") and child.Name == "OctagonPart" then
                    local distance = (player.Character.HumanoidRootPart.Position - child.Position).magnitude
                    if distance < closestDistance then
                        closestDistance = distance
                        closestPart = child
                    end
                end
            end
        end
    end
    
    return closestPart
end

-- Function to lock onto the closest OctagonPart
local function lockOn()
    while true do
        local targetPart = findClosestOctagonPart()
        
        if targetPart then
            -- Set the camera to look at the closest part
            camera.CFrame = CFrame.new(camera.CFrame.Position, targetPart.Position)
            print("Camera locked onto: " .. targetPart.Name .. " at position: " .. tostring(targetPart.Position))
        else
            print("No OctagonPart found.")
        end
        
        -- Wait a shorter time before the next update for smoother transitions
        wait(0.05)  -- Update every 0.05 seconds
    end
end

-- Start locking onto the closest OctagonPart
lockOn()
